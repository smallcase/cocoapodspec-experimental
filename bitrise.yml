format_version: "12"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
app:
  envs:
  - SCLI_VERSION: v0.2.0
  - SCLI_PATH: scli
  - RELEASE_SCG: false
  - RELEASE_LOANS: false
  - COCOA_REPO: sc-cocoapodspec-internal
  - COCOA_REPO_URL: git@github.com:smallcase/cocoapodspec-internal.git
  - SCG_PODSPEC: smallcase_gateway/podspecs/release/SCGateway-qa.podspec.json
  - LOANS_PODSPEC: loans/internal/podspecs/release/SCLoans-qa.podspec.json
  - BITRISE_PROJECT_PATH: SmartInvesting.xcworkspace
  - BITRISE_SCHEME: release
meta:
  bitrise.io:
    machine_type_id: g2-m1.4core
    stack: osx-xcode-15.2.x
trigger_map:
- push_branch: dev
  workflow: test
- pull_request_source_branch: '*'
  workflow: test
workflows:
  assemble:
    steps:
    - script@1:
        title: Assemble
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            sh BuildScripts/clean.sh
            sh BuildScripts/assemble.sh
  ci-setup:
    after_run:
    - z-install-scli
    steps:
    - set-git-credentials@1:
        run_if: .IsCI
        inputs:
        - git_email_address: gatewaytech@smallcase.com
        - git_user_name: gateway-tech-bot
    - activate-ssh-key@4: {}
    - certificate-and-profile-installer@1: {}
    - git-clone@8.2:
        inputs:
        - fetch_tags: "yes"
        - clone_depth: "-1"
    - script@1:
        title: Set Env variables
        inputs:
        - content: |-
            #!/usr/bin/env bash

            # Fail if any commands fail
            set -e
            # Make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # Debug log
            set -x

            sh BuildScripts/bitrise-set-envs.sh
    - manage-ios-code-signing@2: {}
  firebase-deploy:
    envs:
    - BINARY_PATH: .build/Products/$BITRISE_SCHEME/SmartInvesting/Smart Investing.ipa
    steps:
    - script@1:
        title: Install Firebase CLI
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # Docs: https://firebase.google.com/docs/cli#install-cli-mac-linux
            curl -sL https://firebase.tools | upgrade=true bash
    - script@1:
        title: Set Firebase Credentials
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # Check if BITRISEIO_FIREBASE_PRIVATE_KEY_URL is set
            if [ -z "$BITRISEIO_FIREBASE_PRIVATE_KEY_URL" ]; then
                echo "BITRISEIO_FIREBASE_PRIVATE_KEY_URL is not set"
                exit 1
            fi

            curl -L -o service_account.json "$BITRISEIO_FIREBASE_PRIVATE_KEY_URL"

            # Check if the download was successful
            if [ ! -f ./service_account.json ]; then
                echo "Failed to download the service account JSON file"
                exit 1
            fi

            echo "Exporting GOOGLE_APPLICATION_CREDENTIALS..."
            export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service_account.json"
            echo "Exporting GOOGLE_APPLICATION_CREDENTIALS with envman..."
            envman add --key GOOGLE_APPLICATION_CREDENTIALS --value "$(pwd)/service_account.json"

            echo "GOOGLE_APPLICATION_CREDENTIALS : $GOOGLE_APPLICATION_CREDENTIALS"
    - script@1:
        title: Firebase CLI status check
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            firebase --version
            # This should succeed if GOOGLE_APPLICATION_CREDENTIALS was set properly
            firebase projects:list
    - script@1:
        title: Firebase Deploy
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            set -o pipefail
            set -x

            echo "$BINARY_PATH"
            echo "$FIREBASE_APP_ID"

            scope="smallcase_gateway,loans"
            firebase_changelog=$($SCLI_PATH changelog --format "firebase" --dirs "$scope")

            firebase appdistribution:distribute "$BINARY_PATH" --app "$FIREBASE_APP_ID" --release-notes "$firebase_changelog" --groups "smallcase"
  release-app:
    before_run:
    - ci-setup
    - assemble
    after_run:
    - firebase-deploy
  release-sdks:
    before_run:
    - ci-setup
    - assemble
    after_run:
    - firebase-deploy
    steps:
    - script@1:
        title: Install AWS CLI
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # Fetch aws cli tool
            curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
            # Install aws cli tool with mac installer
            sudo installer -pkg AWSCLIV2.pkg -target /
            # Print out the aws cli installation details
            which aws
            aws --version
    - script@1:
        title: Release SDK
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            set -o pipefail
            set -x

            scg_podspec="$SCG_PODSPEC"
            loans_podspec="$LOANS_PODSPEC"
            repo="$COCOA_REPO"
            repo_url="$COCOA_REPO_URL"

            capitalize() {
              echo "$1" | awk '{ for (i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2)) } 1'
            }

            scheme=$(capitalize "$BITRISE_SCHEME")
            
            if [[ "$RELEASE_SCG" == "true" ]];then
              SCG_XC_FRAMEWORK_PATH=${SCG_XC_FRAMEWORK_PATH:-".build/Frameworks/$scheme/SCGateway.xcframework"}
              echo "Releasing SCGateway..."
              $SCLI_PATH cocoapodDeploy --cocoapodDeploy.framework "$SCG_XC_FRAMEWORK_PATH" --cocoapodDeploy.podspec "$scg_podspec" --cocoapodDeploy.repo "$repo" --cocoapodDeploy.repoUrl "$repo_url"
            fi

            if [[ "$RELEASE_LOANS" == "true" ]];then
              LOANS_XC_FRAMEWORK_PATH=${LOANS_XC_FRAMEWORK_PATH:-".build/Frameworks/$scheme/Loans.xcframework"}
              echo "Releasing SCLoans..."
              $SCLI_PATH cocoapodDeploy --cocoapodDeploy.framework "$LOANS_XC_FRAMEWORK_PATH" --cocoapodDeploy.podspec "$loans_podspec" --cocoapodDeploy.repo "$repo" --cocoapodDeploy.repoUrl "$repo_url"
            fi
  test:
    before_run:
    - ci-setup
    steps:
    - script@1:
        title: Validate
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            set -o pipefail
            set -x

            sh BuildScripts/test.sh
  z-install-scli:
    steps:
    - script@1:
        run_if: not .IsPR
        title: Install SCLI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            set -o pipefail
            set -x

            curl -H "Authorization: token $GITHUB_ACCESS_TOKEN" -s https://raw.githubusercontent.com/smallcase/scli/master/install.sh | bash -s -- $SCLI_VERSION $GITHUB_ACCESS_TOKEN
