// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SCGateway
import AVFoundation
import AVKit
import AuthenticationServices
import Foundation
import MobileCoreServices
import QuickLook
@_exported import SCGateway
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _AuthenticationServices_SwiftUI
import _Concurrency
extension UIKit.UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String) -> UIKit.UIImage?
  @available(iOS 9.0, *)
  public class func gif(asset: Swift.String) -> UIKit.UIImage?
}
@objc @objcMembers public class SmallplugData : ObjectiveC.NSObject {
  @objc public var targetEndpoint: Swift.String?
  @objc public var params: Swift.String?
  @objc public init(_ targetEndpoint: Swift.String?, _ params: Swift.String?)
  @objc deinit
}
public enum SCGatewayError : Swift.Int, Swift.Error {
  case uninitialized
  case configNotSet
  public var message: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TransactionError : Swift.Error {
  case userMismatch
  case apiError
  case userAbandoned
  case timedOutError
  case invalidGateway
  case invalidJWT
  case transactionExpired
  case marketClosed
  case invalidUrl
  case invalidTransactionId
  case invalidResponse
  case custom(message: Swift.String)
  case dynamicError(msg: Swift.String, code: Swift.Int)
  case closedBrokerChooser
  case pressedTweet
  case noBrokerError
  case signupOtherBroker
  case transactionExpiredBefore
  case safariTabClosedInitialised
  case safariTabClosedUsed
  case alreadySubscribed
  public var message: Swift.String {
    get
  }
  public var debugMessage: Swift.String? {
    get
  }
}
extension SCGateway.TransactionError : Swift.RawRepresentable {
  public var rawValue: Swift.Int {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: SCGateway.TransactionError.RawValue)
  public init?(rawValue: SCGateway.TransactionError.RawValue, message: Swift.String)
}
@_hasMissingDesignatedInitializers @objc public class ObjcTransactionError : Foundation.NSError {
  @objc override dynamic public var domain: Swift.String {
    @objc get
  }
  @objc override dynamic public var code: Swift.Int {
    @objc get
  }
  @objc deinit
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func loadGif(name: Swift.String)
  @available(iOS 9.0, *)
  @_Concurrency.MainActor(unsafe) public func loadGif(asset: Swift.String)
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func stack(_ views: UIKit.UIView..., spacing: CoreGraphics.CGFloat = 0, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fill) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func hstack(_ views: UIKit.UIView..., spacing: CoreGraphics.CGFloat = 0, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fill) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func withSize<T>(_ size: CoreGraphics.CGSize) -> T where T : UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func withHeight(_ height: CoreGraphics.CGFloat) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func withWidth(_ width: CoreGraphics.CGFloat) -> UIKit.UIView
}
extension UIKit.UIEdgeInsets {
  public static func allSides(_ side: CoreGraphics.CGFloat) -> UIKit.UIEdgeInsets
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func anchor(_ top: UIKit.NSLayoutYAxisAnchor? = nil, left: UIKit.NSLayoutXAxisAnchor? = nil, bottom: UIKit.NSLayoutYAxisAnchor? = nil, right: UIKit.NSLayoutXAxisAnchor? = nil, topConstant: CoreGraphics.CGFloat = 0, leftConstant: CoreGraphics.CGFloat = 0, bottomConstant: CoreGraphics.CGFloat = 0, rightConstant: CoreGraphics.CGFloat = 0, widthConstant: CoreGraphics.CGFloat = 0, heightConstant: CoreGraphics.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) public func anchorWithReturnAnchors(_ top: UIKit.NSLayoutYAxisAnchor? = nil, left: UIKit.NSLayoutXAxisAnchor? = nil, bottom: UIKit.NSLayoutYAxisAnchor? = nil, right: UIKit.NSLayoutXAxisAnchor? = nil, topConstant: CoreGraphics.CGFloat = 0, leftConstant: CoreGraphics.CGFloat = 0, bottomConstant: CoreGraphics.CGFloat = 0, rightConstant: CoreGraphics.CGFloat = 0, widthConstant: CoreGraphics.CGFloat = 0, heightConstant: CoreGraphics.CGFloat = 0) -> [UIKit.NSLayoutConstraint]
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var heightConstaint: UIKit.NSLayoutConstraint? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor(unsafe) public var widthConstaint: UIKit.NSLayoutConstraint? {
    get
    set(newValue)
  }
}
@objc @objcMembers public class GatewayConfig : ObjectiveC.NSObject {
  @objc public var gatewayName: Swift.String!
  public var brokerConfig: SCGateway.BrokerConfigType!
  public var apiEnvironment: SCGateway.Environment!
  public var isLeprechaunActive: Swift.Bool!
  @objc public var isAmoEnabled: Swift.Bool
  @objc public init(gatewayName: Swift.String, brokerConfig: [Swift.String]?, apiEnvironment: SCGateway.Environment, isLeprechaunActive: Swift.Bool, isAmoEnabled: Swift.Bool)
  @objc deinit
}
extension UIKit.UIColor {
  public convenience init?(hex: Swift.String, alpha: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ContentSizedCollectionView : UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) @objc override final public var contentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set(value)
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Transaction : Swift.Codable {
  public struct SuccessData : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SubscriptionConfig : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OrderConfig : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MetaOrderConfig : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SstOrder : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SidInfo : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Order : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OrderBatch : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OrderData : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SipDetail : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum TransactionIntent {
  case connect(response: Swift.String)
  case subscription(_: Swift.String)
  case transaction(smallcaseAuthToken: Swift.String, transactionData: SCGateway.Transaction.SuccessData)
  case holdingsImport(smallcaseAuthToken: Swift.String, broker: Swift.String, status: Swift.Bool, transactionId: Swift.String)
  case fetchFunds(smallcaseAuthToken: Swift.String, fund: Swift.Double, transactionId: Swift.String)
  case authoriseHoldings(smallcaseAuthToken: Swift.String, status: Swift.Bool, transactionId: Swift.String)
  case sipSetup(smallcaseAuthToken: Swift.String, sipAction: SCGateway.SipDetail, transactionId: Swift.String)
}
public enum AllowedBrokerType : Swift.String {
  case SST
  case SMT
  case HOLDINGS_IMPORT
  case CONNECT
  case SIP_SETUP
  case FETCH_FUNDS
  case AUTHORISE_HOLDINGS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(ObjCTransactionIntentConnect) final public class _ObjCTransactionIntentConnect : ObjectiveC.NSObject {
  @objc final public let response: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ObjCTransactionIntentSubscription) final public class _ObjCTransactionIntentSubscription : ObjectiveC.NSObject {
  @objc final public let response: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ObjcTransactionIntentTransaction) final public class _ObjcTransactionIntentTransaction : ObjectiveC.NSObject {
  @objc final public let authToken: Swift.String
  @objc final public let transaction: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ObjcTransactionIntentHoldingsImport) final public class _ObjcTransactionIntentHoldingsImport : ObjectiveC.NSObject {
  @objc final public let authToken: Swift.String
  @objc final public let broker: Swift.String
  @objc final public let status: Swift.Bool
  @objc final public let transactionId: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ObjcTransactionIntentFetchFunds) final public class _ObjcTransactionIntentFetchFunds : ObjectiveC.NSObject {
  @objc final public let authToken: Swift.String
  @objc final public let fund: Swift.Double
  @objc final public let transactionId: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ObjcTransactionIntentAuthoriseHoldings) final public class _ObjcTransactionIntentAuthoriseHoldings : ObjectiveC.NSObject {
  @objc final public let authToken: Swift.String
  @objc final public let status: Swift.Bool
  @objc final public let transactionId: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ObjcTransactionIntentSipSetup) final public class _ObjcTransactionIntentSipSetup : ObjectiveC.NSObject {
  @objc final public let authToken: Swift.String
  @objc final public let sipActive: Swift.Bool
  @objc final public let sipAction: Swift.String
  @objc final public let transactionId: Swift.String
  @objc final public let sipAmount: Swift.Double
  @objc final public let frequency: Swift.String
  @objc final public let iscid: Swift.String
  @objc final public let scheduledDate: Swift.String
  @objc final public let scid: Swift.String
  @objc final public let sipType: Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SeparatorCollectionViewFlowLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutAttributesForDecorationView(ofKind elementKind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc deinit
}
@objc public enum Environment : Swift.Int {
  case development
  case production
  case staging
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NetworkError : Swift.Error {
  case unknown
  case noJSONData
  case custom(message: Swift.String)
  case invalidStatusCode
  case nullData
  case serverError
  case invalidParams
  case accessDenied
}
extension UIKit.UIFont {
  public static func jbs_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}
extension SCGateway.SCGateway {
  @objc dynamic public func getSmallcases(params: [Swift.String : Any]?, completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func getSmallcaseProfile(scid: Swift.String, completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func getSmallcaseNews(scid: Swift.String?, iscid: Swift.String?, optionalParams: [Swift.String : Any]?, completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func getUserInvestments(iscids: [Swift.String]?, completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func getExitedSmallcases(completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func markSmallcaseArchive(iscid: Swift.String, completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func getUserInvestmentDetails(iscid: Swift.String, completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func getHistorical(scid: Swift.String, benchmarkId: Swift.String, base: Swift.Int = 100, duration: Swift.String?, completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
}
@objc public class TransactionErrorResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct AnchoredConstraints {
  public var top: UIKit.NSLayoutConstraint?, leading: UIKit.NSLayoutConstraint?, bottom: UIKit.NSLayoutConstraint?, trailing: UIKit.NSLayoutConstraint?, width: UIKit.NSLayoutConstraint?, height: UIKit.NSLayoutConstraint?
}
public enum BrokerConfigType {
  case defaultConfig
  case custom([Swift.String])
}
extension SCGateway.BrokerConfigType : Swift.Equatable {
  public static func == (lhs: SCGateway.BrokerConfigType, rhs: SCGateway.BrokerConfigType) -> Swift.Bool
}
public protocol SCGatewayProtocol {
}
extension UIKit.UIStackView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func withMargins(_ margins: UIKit.UIEdgeInsets) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func padLeft(_ left: CoreGraphics.CGFloat) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func padTop(_ top: CoreGraphics.CGFloat) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func padBottom(_ bottom: CoreGraphics.CGFloat) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func padRight(_ right: CoreGraphics.CGFloat) -> UIKit.UIStackView
}
@objc public protocol SCGatewayTransactionDelegate {
  @objc optional func shouldDisplayConnectCompletion() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SCGateway : ObjectiveC.NSObject, SCGateway.SCGatewayProtocol {
  @objc public static var shared: SCGateway.SCGateway
  @objc public static var currentTransactionId: Swift.String
  @objc weak public var delegate: SCGateway.SCGatewayTransactionDelegate?
  @available(*, deprecated)
  @objc public func setup(config: SCGateway.GatewayConfig)
  @objc public func setup(config: SCGateway.GatewayConfig, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
  @objc public func initializeGateway(_ authToken: Swift.String, completion: ((Swift.String, Swift.Error?) -> Swift.Void)?)
  @objc public func initializeGateway(sdkToken: Swift.String, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
  public func triggerTransactionFlow(transactionId: Swift.String, presentingController: UIKit.UIViewController, utmParams: Swift.Dictionary<Swift.String, Swift.String>?, brokerConfig: SCGateway.BrokerConfigType?, completion: @escaping (Swift.Result<SCGateway.TransactionIntent, SCGateway.TransactionError>) -> Swift.Void) throws
  public func triggerTransactionFlow(transactionId: Swift.String, presentingController: UIKit.UIViewController, utmParams: Swift.Dictionary<Swift.String, Swift.String>?, completion: @escaping (Swift.Result<SCGateway.TransactionIntent, SCGateway.TransactionError>) -> Swift.Void) throws
  public func triggerTransactionFlow(transactionId: Swift.String, presentingController: UIKit.UIViewController, completion: @escaping (Swift.Result<SCGateway.TransactionIntent, SCGateway.TransactionError>) -> Swift.Void) throws
  @objc public func triggerTransactionFlow(transactionId: Swift.String, presentingController: UIKit.UIViewController, utmParams: Swift.Dictionary<Swift.String, Swift.String>?, brokerConfig: [Swift.String]?, completion: @escaping (Any?, SCGateway.ObjcTransactionError?) -> Swift.Void)
  @objc public func triggerTransactionFlow(transactionId: Swift.String, presentingController: UIKit.UIViewController, utmParams: Swift.Dictionary<Swift.String, Swift.String>?, completion: @escaping (Any?, SCGateway.ObjcTransactionError?) -> Swift.Void)
  @objc public func triggerTransactionFlow(transactionId: Swift.String, presentingController: UIKit.UIViewController, completion: @escaping (Any?, SCGateway.ObjcTransactionError?) -> Swift.Void)
  @objc public func triggerLeadGen(presentingController: UIKit.UIViewController, params: Swift.Dictionary<Swift.String, Swift.String>?)
  @objc public func triggerLeadGen(presentingController: UIKit.UIViewController, params: Swift.Dictionary<Swift.String, Swift.String>?, completion: @escaping (Swift.String?) -> Swift.Void)
  @objc public func triggerLeadGen(presentingController: UIKit.UIViewController, params: Swift.Dictionary<Swift.String, Swift.String>?, utmParams: Swift.Dictionary<Swift.String, Swift.String>?)
  @objc public func triggerLeadGen(presentingController: UIKit.UIViewController, params: Swift.Dictionary<Swift.String, Swift.String>?, utmParams: Swift.Dictionary<Swift.String, Swift.String>?, retargeting: Swift.Bool)
  public func triggerLeadGen(presentingController: UIKit.UIViewController, params: Swift.Dictionary<Swift.String, Swift.String>?, utmParams: Swift.Dictionary<Swift.String, Swift.String>?, retargeting: Swift.Bool?)
  @objc public func logoutUser(presentingController: UIKit.UIViewController, completion: @escaping ((Swift.Bool, Swift.Error?) -> Swift.Void))
  @objc public func launchSmallPlug(presentingController: UIKit.UIViewController, smallplugData: SCGateway.SmallplugData?, completion: @escaping ((Any?, Swift.Error?) -> Swift.Void))
  @objc public func isUserConnected() -> Swift.Bool
  @objc public func getUserAuthToken() -> Swift.String?
  @objc deinit
}
public enum TransactionOrderStatus : Swift.String {
  case completed
  case initialized
  case used
  case processing
  case errored
  case cancelled
  case expired
  case actionRequired
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static var modelName: Swift.String
}
